############################################################
# BL616/8 RISC-V WiFi6 + BT/BLE + ZigBee Chip
############################################################

name=BL616/8 RISC-V WiFi6 + BLE + ZigBee Chip (BouffaloLab)
version=1.0.0

## Compiler global definitions

# Compile variables
# ------------------------

compiler.warning_flags=-w
compiler.warning_flags.none=-w
compiler.warning_flags.default=
compiler.warning_flags.more=-Wall
compiler.warning_flags.all=-Wall -Wextra

compiler.path={build.compiler_path}
compiler.define="-I{compiler.path}../riscv64-unknown-elf/include"

compiler.c.cmd=riscv64-unknown-elf-gcc
compiler.c.flags=-c {compiler.warning_flags} -D__riscv -D__riscv_xlen=32 -g3 "@{compiler.sdk.defines}" "@{compiler.sdk.cflags}" -MMD
compiler.c.elf.cmd=riscv64-unknown-elf-gcc
compiler.c.elf.flags= {compiler.warning_flags}
# -Wl,--gc-sections

compiler.S.cmd=riscv64-unknown-elf-gcc
# compiler.S.cmd=riscv64-unknown-elf-as
compiler.S.flags=-c -x assembler-with-cpp

compiler.cpp.cmd=riscv64-unknown-elf-g++
compiler.cpp.flags=-c {compiler.warning_flags} -D__riscv -D__riscv_xlen=32 -g3 "@{compiler.sdk.defines}" "@{compiler.sdk.cxxflags}" -MMD -DCPU_M0
# nostdlib
compiler.ar.cmd=riscv64-unknown-elf-ar
compiler.ar.flags=rcs

compiler.objcopy.cmd=riscv64-unknown-elf-objcopy
compiler.objcopy.eep.flags=-O ihex
compiler.objcopy.bin.flags = -O binary

compiler.elf2hex.cmd=riscv64-unknown-elf-objcopy
compiler.elf2hex.flags = -O ihex
compiler.elf2hex.bin.flags=-O binary
compiler.elf2hex.hex.flags=-O ihex -R .eeprom

compiler.ld.cmd = riscv64-unknown-elf-gcc
compiler.ldflags=
compiler.libraries.ldflags=

compiler.dump.cmd = riscv64-unknown-elf-objdump
compiler.dump.flags= --disassemble-all

compiler.size.cmd=riscv64-unknown-elf-size
compiler.define=

# this can be overriden in boards.txt
build.flags=
build.extra_flags=
build.extra_ldflags=
compiler.sdk=

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.S.extra_flags=
compiler.cpp.extra_flags=
compiler.ar.extra_flags=
compiler.objcopy.eep.extra_flags=
compiler.objcopy.bin.extra_flags=
compiler.elf2hex.extra_flags=
compiler.dump.extra_flags=
compiler.ld.extra_flags=

## Compile patterns
#  --------------------------------------------------------

## Compiler c files
## "-I{build.core.path}/api/deprecated" "-I{build.core.path}/api/deprecated-avr-comp"
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.c.flags} -DARDUINO={runtime.ide.version} -D{build.board} -DARDUINO_ARCH_{build.arch} {build.extra_flags} {build.extra_ldflags} {compiler.define} {compiler.c.extra_flags} {includes} "-I{build.core.path}/api/deprecated" "-I{build.core.path}/api/deprecated-avr-comp" "-iprefix{build.core.path}" "@{compiler.sdk.includes}" "{source_file}" -o "{object_file}" 

## Compiler cpp files
## "-I{build.core.path}/api/deprecated" "-I{build.core.path}/api/deprecated-avr-comp"
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpp.flags} -DARDUINO={runtime.ide.version} -D{build.board} -DARDUINO_ARCH_{build.arch} {build.extra_flags} {build.extra_ldflags} {compiler.define} {compiler.cpp.extra_flags} {includes} "-I{build.core.path}/api/deprecated" "-I{build.core.path}/api/deprecated-avr-comp" "-iprefix{build.core.path}" "@{compiler.sdk.includes}" "{source_file}" -o "{object_file}"

## Compiler S files
## "-I{build.core.path}/api/deprecated" "-I{build.core.path}/api/deprecated-avr-comp"
recipe.S.o.pattern="{compiler.path}{compiler.S.cmd}" {compiler.S.flags} -DARDUINO={runtime.ide.version} -D{build.board} -DARDUINO_ARCH_{build.arch} {build.extra_flags} {build.extra_ldflags} {compiler.define} {compiler.cpp.extra_flags} {includes} "-I{build.core.path}/api/deprecated" "-I{build.core.path}/api/deprecated-avr-comp" "-iprefix{build.core.path}" "@{compiler.sdk.includes}" "{source_file}" -o "{object_file}"

## Compiler archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{archive_file_path}" "{object_file}"

## Preprocess linker script
recipe.hooks.linking.prelink.1.pattern="{compiler.path}{compiler.c.elf.cmd}" -E -P -x c {build.extra_ldflags} "{build.variant.path}/{build.ldscript}" -o "{build.path}/{build.ldscript}"

## Combine gc-section, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" "-L{build.path}" {compiler.c.elf.flags} {compiler.c.elf.extra_flags} {build.extra_flags} {build.extra_ldflags} "@{compiler.sdk.ldflags}" "-T{build.path}/{build.ldscript}" "-Wl,-Map,{build.path}/{build.project_name}.map" --specs=nosys.specs {compiler.ldflags} -o "{build.path}/{build.project_name}.elf" {object_files} -Wl,--whole-archive "{build.path}/{archive_file}" {compiler.sdk.libapp} {compiler.sdk.liblhal} {compiler.sdk.liblibc} {compiler.sdk.libmm} {compiler.sdk.libstd} {compiler.sdk.libutils} {compiler.sdk.libpka} {compiler.sdk.libdsp} {compiler.sdk.libfreertos} -Wl,--no-whole-archive -Wl,--start-group {compiler.sdk.extra_ldflags} {compiler.libraries.ldflags} -Wl,--end-group

## Create eeprom
recipe.objcopy.eep.pattern=

## Create output files
recipe.objcopy.bin.pattern="{compiler.path}{compiler.objcopy.cmd}" {compiler.objcopy.bin.flags} {compiler.objcopy.bin.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.bin"
# recipe.objcopy.dump.pattern="{compiler.path}{compiler.dump.cmd}" {compiler.dump.flags} {compiler.dump.extra_flags} "{build.path}/{build.project_name}.elf" > "{build.path}/{build.project_name}.asm"
recipe.objcopy.hex.pattern="{compiler.path}{compiler.elf2hex.cmd}" {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} "{build.path}/{build.project_name}.elf"  "{build.path}/{build.project_name}.hex"

## Save hex
recipe.output.tmp_file={build.project_name}.bin
recipe.output.save_file={build.project_name}.{build.variant}.bin

## General whole bin file
compiler.output.bflb_fw_post_proc.path={runtime.tools.bflb_fw_post_proc.path}
compiler.output.bflb_fw_post_proc.cmd=bflb_fw_post_proc
compiler.output.bflb_fw_post_proc.cmd.windows=bflb_fw_post_proc.exe
compiler.output.bflb_fw_post_proc.cmd.linux=bflb_fw_post_proc-ubuntu
compiler.output.bflb_fw_post_proc.cmd.macosx=bflb_fw_post_proc-macos
# compiler.output.bflb_fw_post_proc.preupload.params=
recipe.objcopy.wholebin.pattern="{compiler.output.bflb_fw_post_proc.path}/{compiler.output.bflb_fw_post_proc.cmd}" --chipname={build.core} --brdcfgdir={compiler.sdk.wholebin_conf_path} --imgfile={build.path}\{build.project_name}.bin

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex.data=^(?:\.data|\.bss)\s+([0-9]+).*
recipe.size.regex=^(?:\.data|\.text|\.rodata)\S*?\s+([0-9]+).*


#--------------------------------------------------------
## BouffaloLab Flash tools
#--------------------------------------------------------

tools.bflb_flash_tools.path={runtime.tools.bflb_flash_tools.path}
tools.bflb_flash_tools.cmd=BLFlashCommand
tools.bflb_flash_tools.cmd.windows=BLFlashCommand.exe
tools.bflb_flash_tools.cmd.linux=BLFlashCommand-ubuntu
tools.bflb_flash_tools.cmd.macosx=BLFlashCommand-macos
tools.bflb_flash_tools.upload.params.verbose=
tools.bflb_flash_tools.upload.params.quiet=
tools.bflb_flash_tools.upload.protocol=uart

tools.bflb_flash_tools.upload.pattern="{path}/{cmd}" --interface={upload.protocol} --chipname=bl616 --port={serial.port} --baudrate={upload.speed} --firmware={build.path}\{build.project_name}.bin

